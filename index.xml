<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>polariseye</title>
    <link>https://polariseye.github.io/</link>
    <description>Recent content on polariseye</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 14 Aug 2017 09:58:40 +0000</lastBuildDate>
    
	<atom:link href="https://polariseye.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>vim搭建go打开发环境</title>
      <link>https://polariseye.github.io/ubuntu/vim_go/</link>
      <pubDate>Mon, 14 Aug 2017 09:58:40 +0000</pubDate>
      
      <guid>https://polariseye.github.io/ubuntu/vim_go/</guid>
      <description>vim搭建go打开发环境 安装go打vim插件，具体步骤如下： 安装vim插件管理工具 安装go的vim插件 安装相关具体插件 安装vim插件管理工具</description>
    </item>
    
    <item>
      <title>系统管理</title>
      <link>https://polariseye.github.io/ubuntu/sysmanage/</link>
      <pubDate>Mon, 14 Aug 2017 09:58:11 +0000</pubDate>
      
      <guid>https://polariseye.github.io/ubuntu/sysmanage/</guid>
      <description>系统管理 环境变量配置 环境变量配置均使用export 要设置打环境变量 使修改立即生效：source 配置文件名 系统环境配置 /etc/profile: 每个用户第一次登录时，</description>
    </item>
    
    <item>
      <title>vim多文件多窗口操作</title>
      <link>https://polariseye.github.io/ubuntu/vim_window/</link>
      <pubDate>Sat, 12 Aug 2017 12:31:55 +0000</pubDate>
      
      <guid>https://polariseye.github.io/ubuntu/vim_window/</guid>
      <description>vim多文件多窗口操作 同时打开多个文件 vim fl1 fl2 如果vim已经启动，在当前窗口中再打开一个文件: :open file 文件间切换 Ctrl+6—下一个文件 :bn—下</description>
    </item>
    
    <item>
      <title>vim命令记录</title>
      <link>https://polariseye.github.io/ubuntu/vim/</link>
      <pubDate>Sat, 12 Aug 2017 10:31:55 +0000</pubDate>
      
      <guid>https://polariseye.github.io/ubuntu/vim/</guid>
      <description>vim命令记录 光标控制 移动到第一行第一个字符:gg 移动到文件尾:G 移动到当前行的行尾:$ 移动到当前行的行首:0,|均可 ^:移动到行首打首字母</description>
    </item>
    
    <item>
      <title>unicode相关详解</title>
      <link>https://polariseye.github.io/text/unicode/</link>
      <pubDate>Thu, 03 Aug 2017 11:13:55 +0000</pubDate>
      
      <guid>https://polariseye.github.io/text/unicode/</guid>
      <description>unicode unicode 是基于通用字符集(Universal Character Set)的标准发展。Unicode的学名是&amp;rdquo;Universal Multiple-Octet Coded Character Set&amp;rdquo</description>
    </item>
    
    <item>
      <title>任务管理</title>
      <link>https://polariseye.github.io/ubuntu/jobmanage/</link>
      <pubDate>Thu, 03 Aug 2017 11:13:55 +0000</pubDate>
      
      <guid>https://polariseye.github.io/ubuntu/jobmanage/</guid>
      <description>ubuntu 在用命令整理 控制台管理 当前所有任务查看 jobs -l 让任务到后台执行 command+&amp;amp; 比如：./start.sh&amp;amp; 切换正在运行的程序到后台 如果程序正在前台运</description>
    </item>
    
    <item>
      <title></title>
      <link>https://polariseye.github.io/git/git-error%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://polariseye.github.io/git/git-error%E8%A7%A3%E5%86%B3/</guid>
      <description>git出错手动恢复记录 又是一天加班时，高高兴兴地去吃了一碗面，回来happy了，git出错了
$ git branch fatal: Failed to resolve HEAD as a valid ref.  度娘寻他千百度，看了文章git操作错误Failed to resolve HEAD as a valid ref解决方案后，发现现象不一样，但最终还是产生了些灵感。
首先使用fsck看看到底什么情况了
$ git fsck error: Invalid HEAD Checking object directories: 100% (256/256), done. Checking objects: 100% (6616/6616), done. error: refs/heads/develop_tmp: invalid sha1 pointer 0000000000000000000000000000000000000000 error: bad ref for .git/logs/HEAD error: bad ref for .git/logs/refs/heads/develop_tmp error: bad signature fatal: index file corrupt  这个大概意思是出了很多错：
 sha1值不正确，变成了0000000000000000000000000000000000000000 log日志解析有问题 index文件解析有问题  既然问题大概知道了，那咱就手动挨个恢复(我的代码分支名是:develop_tmp)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://polariseye.github.io/kafka/kafka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://polariseye.github.io/kafka/kafka/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://polariseye.github.io/mysql/mysql-study/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://polariseye.github.io/mysql/mysql-study/</guid>
      <description>mysql 重要内容整理 数据表修改 以下示例的表结构：
CREATE TABLE `student_info` ( `Id` int(11) NOT NULL, `Name` varchar(24) DEFAULT NULL, `Sex` int(11) DEFAULT NULL, PRIMARY KEY (`Id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;   更改表名：student_info 更改为student_info2
ALTER table student_info RENAME student_info2;  修改数据库字段类型:Sex更改为bigint
alter table `student_info` modify `Sex` bigint null after `Name`;  字段重命名：Sex更名为Sex1,并把类型更改为bigint
ALTER table student_info change Sex Sex1 bigint null AFTER `Name`;  添加字段
--语法 ALTER TABLE tablename ADD [COLUMN] column_definition [FIRST | AFTER col_name] --添加默认值字段 ALTER TABLE User ADD Age INT NOT NULL DEFAULT 0; ---自增值 auto_increment  删除字段</description>
    </item>
    
    <item>
      <title></title>
      <link>https://polariseye.github.io/protocol/protoc-use/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://polariseye.github.io/protocol/protoc-use/</guid>
      <description> protocol buffer教程 protocol buffer安装及使用  安装protocol buffer代码生成工具:点击下载（直接下载可执行程序即可），把可执行程序放置在系统path目录中，以便通过命令protoc使用
 protocol buffer生成golang代码需要安装对应的golang插件，把可执行程序放置在系统的path目录中即可。点击下载,推荐使用其中的插件protoc-gen-gofast
 protoc-gen-gofast生成的代码需要依赖对应protocol buffer的库protobuf，点击下载
 使用命令 protoc &amp;ndash;gofast_out=. myproto.proto 生成代码
  参考文档：
 在 Golang 中使用 Protobuf  protocol buffer语法 以下只针对protobuf3进行使用介绍
参考文档：
 Protobuf3语言指南  protocol buffer内部原理 参考文档:
 Google Protocol Buffer 的使用和原理  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://polariseye.github.io/python/python%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://polariseye.github.io/python/python%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98/</guid>
      <description>Python在windows下版本共存 使用py实现 在安装python3(&amp;gt;=3.3)时，Python的安装包实际上在系统中安装了一个启动器py.exe，默认放置在文件夹C:\Windows\下面。这个启动器允许我们指定使用Python2还是Python3来运行代码（当然前提是你已经成功安装了Python2和Python3）
执行脚本 py -2/-3 待执行的文件.py   -2代表使用python2执行 -3代表使用python3执行  也可以在脚本中指定到底使用python2执行还是python3执行 具体：
#! python2 # coding: utf-8  下载依赖库  使用python2下载  py -2 -m pip install 依赖库名称   使用python3下载  py -3 -m pip install 依赖库名称  python 虚拟环境 虚拟环境是基于virtualenv进行环境隔离。每次创建新的环境时，会进行一次基础库的download
virtualenv安装 pip install virtualenv  为自己的项目创建独立的环境 初始化环境
virtualenv --no-site-packages venv  其中venv为自己想要的名称
重要参数说明: * –no-site-packages: 已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境 * &amp;ndash;system-site-packages: 仍然沿用系统已有的所有三方库
进入独立环境 虚拟环境需要先进入虚拟环境，然后即可直接使用
linux里面:
source venv/bin/activate  windows里面：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://polariseye.github.io/python/python%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://polariseye.github.io/python/python%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE/</guid>
      <description> python通用配置 依赖库管理 python 一般使用pip 进行依赖库管理
由于国内使用python会很慢，所以建议使用国内镜像，更改国内镜像的方式如下：
 Unix:$HOME/.config/pip/pip.conf Mac: $HOME/Library/Application Support/pip/pip.conf Windows：%APPDATA%\pip\pip.ini，%APPDATA%的实际路径我电脑上是C:\Users\user_xxx\AppData\Roaming，可在cmd里执行echo %APPDATA%命令查看  </description>
    </item>
    
  </channel>
</rss>